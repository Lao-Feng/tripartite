<?xml version="1.0" encoding="UTF-8"?>
<!--①声明context的命名空间-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">
    <!-- 使用注解的包，包括子集 -->
    <!--②扫描类包以应用注解定义的Bean-->
    <context:component-scan base-package="springfox,com.teamax.alleyoop.controller"/>
    <context:component-scan base-package="com.teamax.alleyoop.web"/>
    <context:component-scan base-package="com.teamax.alleyoop.common.aspect"/>
    <context:component-scan base-package="com.teamax.alleyoop.common.interceptor"/>
    <context:component-scan base-package="com.teamax.alleyoop.common.util"/>
    <context:component-scan base-package="com.teamax.alleyoop.common.redis"/>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="3500000"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <!-- Start: 配置json消息转换器 & 参数解析-->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
        <property name="dateFormat">
            <bean class="java.text.SimpleDateFormat">
                <constructor-arg index="0" type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
            </bean>
        </property>
    </bean>
    <mvc:annotation-driven>
        <mvc:return-value-handlers>
            <bean class="com.teamax.alleyoop.common.json.JsonReturnHandler"></bean>
        </mvc:return-value-handlers>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json; charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="true"/>
                <property name="objectMapper" ref="objectMapper"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- End: 配置json消息转换器 & 参数解析 -->

    <!-- 使用了<url-pattern>/</url-pattern>,所以要对静态资源进行处理 -->
    <mvc:default-servlet-handler/>

    <!-- 使用thymeleaf解析页面 -->
    <bean id="templateResolver"
          class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML" />
        <property name="cacheable" value="false" />
        <property name="characterEncoding" value="UTF-8"/><!--不加会乱码-->
    </bean>
    <bean id="templateEngine"
          class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
    </bean>
    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding" value="UTF-8"/><!--解决中文乱码-->
    </bean>

    <!-- 使用thymeleaf生成邮件发送模板 -->
    <bean id="mailTemplateResolver"
          class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">
        <property name="prefix" value="classpath:template/mail/" />
        <property name="suffix" value=".vm" />
        <property name="templateMode" value="HTML" />
        <property name="characterEncoding" value="UTF-8"/><!--不加会乱码-->
    </bean>
    <bean id="mailTemplateEngine"
          class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="mailTemplateResolver" />
    </bean>
    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="mailTemplateEngine" />
        <property name="characterEncoding" value="UTF-8"/><!--解决中文乱码-->
    </bean>
    <!-- 启用shrio 控制器授权注解拦截方式 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="(execution(* com.teamax.alleyoop.service.*.*(..)))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>
    <!--Aop切面编程的配置-->
    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy/>
    <!-- 通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <!--将日志类注入到bean中。-->
    <bean id="logAspect" class="com.teamax.alleyoop.common.aspect.SysLogAspect"></bean>
    <aop:config>
        <!--调用日志类-->
        <aop:aspect id="LogAspect" ref="logAspect">
            <!--配置在controller包下所有的类在调用之前都会被拦截-->
            <aop:pointcut id="log" expression="@annotation(com.teamax.alleyoop.common.annotation.SysLogAnnotation)"/>
            <!-- 方法前触发 <aop:before pointcut-ref="log" method="saveSysLog"/> -->
            <!-- 异常处理  --> <aop:after-throwing pointcut-ref="log" method="afterThrowingMethod" throwing="ex"/>
            <!-- 方法后触发 --><aop:after pointcut-ref="log" method="saveSysLog"/>
            <!-- 环绕触发  <aop:around pointcut-ref="log" method="around"/>  -->
        </aop:aspect>
    </aop:config>

    <mvc:interceptors>
        <bean class="com.teamax.alleyoop.common.interceptor.RestFulInterceptor"/>
    </mvc:interceptors>

    <bean class="com.teamax.alleyoop.common.swagger.Swagger2Config"/>

    <!-- 配置定时器注解开关 里面可以配置很多参数，这里只是简单的打开task,并支持@Scheduled -->
    <task:scheduler id="Scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="Scheduler" proxy-target-class="true"/>
</beans>